# "org" ensures this Service is used with the correct Serverless Framework Access Key.
##org: esenciaestudios
# "service" is the name of this project. This will also be added to your AWS resource names.
service: core-service

provider:
  name: aws
  runtime: nodejs20.x
  profile: esencia
  stage: dev
  region: us-east-1
  deploymentBucket:
    name: esencia-backend-deployment
    serverSideEncryption: AES256
    blockPublicAccess: true
  
  role: arn:aws:iam::${aws:accountId}:role/lambda-role-execution
  vpc:
    securityGroupIds:
      - sg-083d8b2d9ba91627a
    subnetIds:
      - subnet-00a83d29f11333109
      - subnet-0fe2c0c7efdd332c9
      - subnet-0e71dc73600fde75a
      - subnet-0001da65ac21b3935
      - subnet-050448c98ab862173
      - subnet-0912aaf196b1f0adb

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - secretsmanager:GetSecretValue
        - ssm:GetParameters
        - s3:PutObject
      Resource: "*" 
  
  environment:
    DB_HOST: ${env:DB_HOST}
    DB_USERNAME: ${env:DB_USERNAME}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_NAME: ${env:DB_NAME}
    DB_PORT: ${env:DB_PORT}
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
    ENVIRONMENT: ${self:provider.stage}
  
  layers:
    - arn:aws:lambda:${aws:region}:${aws:accountId}:layer:BackendEsenciaLayer:2

resources:
  Resources:
    HttpApi:
        Type: AWS::ApiGatewayV2::Api
        Properties:
          Name: EsenciaHttpApi
          ProtocolType: HTTP

    EsenciaAuthorizer:
      Type: AWS::ApiGatewayV2::Authorizer
      Properties:
        AuthorizerType: JWT
        Name: EsenciaAuthorizer
        ApiId: !Ref HttpApi
        IdentitySource:
          - "$request.header.Authorization"
        JwtConfiguration:
          Issuer: https://cognito-idp.${self:provider.region}.amazonaws.com/${env:COGNITO_USER_POOL_ID}
          Audience:
            - ${env:COGNITO_CLIENT_ID}

  Outputs:
    EsenciaAuthorizerId:
      Value:
        Ref: EsenciaAuthorizer
      Export:
        Name: EsenciaAuthorizerId
  
    HttpApiId:
      Value: !Ref HttpApi
      Export:
        Name: HttpApiId-${self:provider.stage}

functions:
  get-users:
    handler: handlers/usersHandlers.getUsers
    events:
      - httpApi:
          path: /users
          method: get
          authorizer:
            name: JwtAuthorizer
          
  get-users-by-id:
    handler: handlers/usersHandlers.getUserById
    events:
      - httpApi:
          path: /users/{id}
          method: get
          authorizer:
            name: JwtAuthorizer

  create-user:
    handler: handlers/usersHandlers.createUser
    events:
      - httpApi:
          path: /users
          method: post
          authorizer:
            name: JwtAuthorizer
          
  update-user:
    handler: handlers/usersHandlers.updateUser
    events:
      - httpApi:
          path: /users/{id}
          method: put
          authorizer:
            name: JwtAuthorizer

  delete-user:
    handler: handlers/usersHandlers.deleteUser
    events:
      - httpApi:
          path: /users/{id}
          method: delete
          authorizer:
            name: JwtAuthorizer

  activate-user:
    handler: handlers/usersHandlers.activateUser
    events:
      - httpApi:
          path: /users/{id}/activate
          method: post
          authorizer:
            name: JwtAuthorizer

  deactivate-user:
    handler: handlers/usersHandlers.deactivateUser
    events:
      - httpApi:
          path: /users/{id}/deactivate
          method: post
          authorizer:
            name: JwtAuthorizer

  login-user:
    handler: handlers/usersHandlers.loginUser
    events:
      - httpApi:
          path: /login
          method: post

  get-roles:
    handler: handlers/rolesPermissionsHandlers.getRoles
    events:
      - httpApi:
          path: /roles
          method: get
          authorizer:
            name: JwtAuthorizer

  create-role:
    handler: handlers/rolesPermissionsHandlers.createRole
    events:
      - httpApi:
          path: /role
          method: post
          authorizer:
            name: JwtAuthorizer

  update-role:
    handler: handlers/rolesPermissionsHandlers.updateRole
    events:
      - httpApi:
          path: /role/{id}
          method: put
          authorizer:
            name: JwtAuthorizer

  delete-role:
    handler: handlers/rolesPermissionsHandlers.deleteRole
    events:
      - httpApi:
          path: /role/{id}
          method: delete
          authorizer:
            name: JwtAuthorizer

  get-permissions:
    handler: handlers/rolesPermissionsHandlers.getPermissions
    events:
      - httpApi:
          path: /permissions
          method: get
          authorizer:
            name: JwtAuthorizer

  create-permission:
    handler: handlers/rolesPermissionsHandlers.createPermission
    events:
      - httpApi:
          path: /permission
          method: post
          authorizer:
            name: JwtAuthorizer

  update-permission:
    handler: handlers/rolesPermissionsHandlers.updatePermission
    events:
      - httpApi:
          path: /permission/{id}
          method: put
          authorizer:
            name: JwtAuthorizer

  delete-permissions:
    handler: handlers/rolesPermissionsHandlers.deletePermission
    events:
      - httpApi:
          path: /permission/{id}
          method: delete
          authorizer:
            name: JwtAuthorizer

  assign-permissions-to-role:
    handler: handlers/rolesPermissionsHandlers.assignPermissionsToRole
    events:
      - httpApi:
          path: /role/{id}/permissions
          method: post
          authorizer:
            name: JwtAuthorizer

  get-role-with-permissions:
    handler: handlers/rolesPermissionsHandlers.getRoleWithPermissions
    events:
      - httpApi:
          path: /role/{id}/permissions
          method: get
          authorizer:
            name: JwtAuthorizer

custom:
  serverless-offline:
    host: 0.0.0.0
    httpPort: 4000

plugins:
  - serverless-offline

package:
  patterns:
    - "!layer.zip"
    - "!layer/**"
    - "!.git/**"
    - "!.env"
    - "!test/**"
    - "!jest.config.js"
    - "!bitbucket-pipelines.yml"
    - "!node_modules/**"